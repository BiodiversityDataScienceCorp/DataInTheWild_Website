---
title: "1.2: Introduction to Coding"
---

## Learning Outcomes

-   Students will be able to define the following terms:
    -   object
    -   assignment
    -   vector
    -   function
    -   data frame
-   Students will be able to run code line-by-line and as code chunks from an Rmarkdown file.
-   Students will be able to comment their code effectively.
-   Students will be able to write code assign values to variables and use these variables to perform various operations.
-   Students will be able to use help files to learn how to use functions.
-   Students will be able to recall and explain how functions operate, and the basic syntax around functions (arguments, auto-completion, parentheses).
-   Students will be able to differentiate different data classes in R.
-   Students will learn how to create their own data structures (vectors, data frames).

## Assigning Objects

Assignments are really key to almost everything we do in R. This is how we create permanence in R. Anything can be saved to an object, and we do this with the assignment operator, `<-`.

The short-cut for `<-` is `Alt + -` (or `Option + -` on a Mac)

```{r, message=FALSE, warning=FALSE}
# Assigning Objects
mass <- 47.5                        # assign 47.5 to "mass" (in kg)
age <- 122                          # assign 122 to "age"
mass <- mass * 2                    # multiply mass by 2
age <- age - 20                     # subtract 20 from age
mass_index <- mass/age              # divide mass by age
mass_sq <- mass^2                   # raise to an exponent (2)

```

This is simple and you'll rarely do it in real-world scenarios.

## 1-Dimensional Data: Vectors

We can also assign more complex group of elements of the same type to a particular object. This is called a **vector**, a basic data structure in R.

```{r, message=FALSE, warning=FALSE}
# A group of mass values assigned to "mass_kg"
mass_kg <- c(3, 2, 4, 9, 7, 3, 6)

# View object
mass_kg

# A group of animal names assigned to "animals"
animals <- c("cat", "rat", "bat")

# View object
animals

```

R does everything in vectors

## Data classes

There are a few main types in R, and they behave differently.

-   ***Numeric:*** numbers
    -   Integer (no decimals allowed)
    -   Double (decimals allowed --- interchangeable with numeric)
-   ***Character:*** letters or mixture
-   ***Logical:*** True or False; T or F
-   ***Factors:*** best used for data that need to be in a specific order; levels indicate the order

```{r, message=FALSE, warning=FALSE}
# Examples of different data classes

# We can view what class of data is in each of our objects if we call them

mass_kg       # numeric, integer, double
animals       # character

animal_size <- as.factor(c("small", "medium", "large"))
animal_size   # factor puts in order 

logic <- c(T, F, F, T)  
logic         # logical
```

Vectors have to contain elements that are all of the same class.

```{r, eval = FALSE, message=FALSE, warning=FALSE}
# Will this become an object?
# We will try putting in an integer, double, and character
vec <- c(1, 1.000, "1")
```

## Sub-setting Vectors

Sometimes we want to pull out and work with specific values from a vector. This is called sub-setting (taking a smaller set of the original). To signify which element of the vector we'd like to pull out, we can use a square bracket and the number of the element we are interested in taking.

```{r, message=FALSE, warning=FALSE}
# Use square brackets

mass_kg[2]        # Pull out second element in mass_kg

mass_kg[2:4]      # Pull out 2nd, 3rd, and 4th elements from mass_kg
```

## Functions

**Functions** are pre-written bits of codes that perform specific tasks for us. There are ones built into R (base R), but later in the course we will see that there are more specialized ones that we can equipt using another function called `library()`.

Functions are always followed by parentheses. Anything you type into the parentheses are called **arguments**.

```{r, message=FALSE, warning=FALSE}
# Functions

# Average the mass_kg vector from above
mass_kg_mean <- mean(mass_kg)   

# View
mass_kg_mean

# Round the result in mass_kg mean
round(mass_kg_mean)           

# Maybe we want to round to 2 digits past 0
round(mass_kg_mean, digits = 2) 
```

To get more information about a function, use the `help()` function or `? name_of_function`.

```{r, message=FALSE, warning=FALSE, eval=FALSE}
help(round) # or type ? help
```

We can use a function called `class()` to figure out the data type of a vector.

```{r, message=FALSE, warning=FALSE}
# A function that tells us the class
class(mass_kg)
```

### Group Challenge

Let's practice! Write a few lines of code that do the following:

-   Create a vector with numbers from 6 to 1 (6, 5, 4, 3, 2, 1)
-   Assign the vector to an object named `vec`
-   Subset `vec` to include the last 3 numbers (should include 3, 2, 1)
-   Find the sum of the numbers (hint: use the `sum()` function)

***Answer:*** 6

```{r, message=FALSE, warning=FALSE}
# Make vector
vec <- c(6, 5, 4, 3, 2, 1)

# Check work
vec

# Subset last three elements
vec <- vec[4:6]

# Check work
vec

# Sum final vector
sum(vec)
```

Already finished? See if you can condense your code down any further or turn around and help out a neighbor.

```{r, message=FALSE, warning=FALSE}
# Auto-generate sequence of numbers 6 to 1
vec <- seq(6, 1)

# From inside to outside:
# (1) subset last 3 elements in vector
# (2) sum the resulting vector
sum(vec[4:6])
```

## 2-Dimensional Data: Data Frames

Most of the data you will encounter is two-dimensional, i.e., it has columns and rows. Its structure resembles a spreadsheet. R is really good with these types of data.

-   **Rows** go side-to-side
-   **Columns** go up-and-down

![](assets/row_column.png)

Data frames are made up of multiple vectors. Each vector becomes a column.

```{r, message=FALSE, warning=FALSE}
# Create a simple data frame
# First column is plant heights
# Next column is nitrogen T/F
plants <- data.frame(height = c(55, 17, 42, 47, 68, 39),
                     nitrogen = c("Y", "N", "N", "Y", "Y", "N"))

# View our new data frame
plants
```

### Sub-setting Data Frames

Because data frames are two-dimensional, we can subset data in different ways. We can select specific columns, specific rows, or filter rows by values.

R always takes information for the row first, then the column.

```{r, message=FALSE, warning=FALSE}
# Sub-setting data frames

# 2-dimensional, so you need to specify row and then column as [row, column]

# plants[3] # Will not work

# Get row 4, column 1
plants[4,1]

# Get column 2
plants[, 2]
```

Another way to pull out a single column from a data frame is with the `$` operator. This can really come in handy when you know the name of the column but not the position.

```{r, message=FALSE, warning=FALSE}
# Get "height" column
plants$height
```

Ideally, after typing `$`, R should give you a drop down list of all the column names that you can select from. Sometimes that doesn't happen though, and that's okay! You can also find column names / numbers by opening and looking through your data frame object in the Environment.

### Discussion Point

This is a simple data set, but let's come up with some questions.

Example: Height of plants treated with nitrogen vs. those not treated.

```{r, message=FALSE, warning=FALSE}
# Filter rows based on values in the nitrogen column

# Isolate plants data where nitrogen is "Y"
plants[plants$nitrogen == "Y", ]

# Find the mean of plants treated with nitrogen
mean(plants[plants$nitrogen == "Y", 1])

```

### Group Challenge

Using help files on functions

As a group, find the standard deviation (`sd()`) of the height of plants treated with nitrogen and those not treated with nitrogen. Which group has the larger standard deviation?

```{r, message=FALSE, warning=FALSE}
# Standard deviation of plants treated with nitrogen
sd(plants[plants$nitrogen == "Y", 1])

# Standard deviation of plants NOT treated with nitrogen
sd(plants[plants$nitrogen == "N", 1])

```

Come up with a definition of standard deviation (Google is your friend!), use the help file (`help()` or `? function`) to find out how the `sd()` function works, and be prepared to show the code you used.

## Helpful Functions

Below are some functions that I often find very helpful when working with vectors and data frames:

-   `str()`
-   `head()` and `tail()`
-   `length()`
-   `ncol()` and `nrow()`
-   `names()`

```{r, message=FALSE, warning=FALSE}
# Structure of the object
str(plants) 

# First 6 values or rows (default)
head(plants) 

# First n values or rows
head(plants, n = 4) 

# Last n values or rows
tail(plants, n = 4) 

# For a dataframe, length() gives the number of columns
length(plants)  

# For a column or vector, length() gives number of rows
length(plants$height) 

# Number of columns
ncol(plants)  

# Number of rows
nrow(plants)  

# List of column or object names
names(plants) 
```
